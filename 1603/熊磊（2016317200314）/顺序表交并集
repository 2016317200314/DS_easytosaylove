#include<stdio.h>

#define MaxSize 50
typedef int ElementType;
typedef struct Seqlist
{
    ElementType elem[MaxSize];
    int length;
}Seqlist;
void Initlist(Seqlist *L)
{
    L->length=0;
}
void Assignment(Seqlist *L,int len,ElementType Array[])
{
    int i;
    if(len<=MaxSize/2)
    {
        for(i=0;i<len;i++)
            L->elem[i]=Array[i];
        L->length=len;
    }
    else
    {
        for(i=0;i<MaxSize;i++)
            L->elem[i]=Array[i];
        L->length=MaxSize;
    }
}
void Union(Seqlist *L1,Seqlist *L2,Seqlist *L3)
{
    int i,j,k=0;
    for(i=0;i<L1->length;i++)
        L3->elem[k++]=L1->elem[i];
    for(j=0;j<L2->length;j++)
        L3->elem[k++]=L2->elem[j];
    L3->length=k;
}
void Intersection(Seqlist *L1,Seqlist *L2,Seqlist *L3)/*����*/
{
    int i,j,k=0;
    for(i=0;i<L1->length;i++)
    {
        for(j=0;j<L2->length;j++)
        {
            if(L1->elem[i]==L2->elem[j])
            {
                L3->elem[k++]=L1->elem[i];
            }
        }
    }
    L3->length=k;
}
void SortAndDelete(Seqlist *L)
{
    int i,j,m,flag=1;
    ElementType temp;
    for(i=0;i<L->length-1;i++)
    {
        for(j=i+1;j<L->length;j++)
        {
            if(L->elem[i]>L->elem[j])
                temp=L->elem[i],L->elem[i]=L->elem[j],L->elem[j]=temp;
        }
    }

    for(i=0;i<L->length-1;i++)
    {
        for(j=i+1;j<L->length;j++)
        {
            if(L->elem[i]==L->elem[j])
            {
                for(m=j;m<L->length-1;m++)
                {
                    L->elem[m]=L->elem[m+1];
                }
                L->length--;
            }
        }
    }
}

void Display(Seqlist *L)
{
    int i;
    for(i=0;i<L->length;i++)
        printf("%d ",L->elem[i]);
    printf("\n");
}

int main()
{
    Seqlist L1,L2,L3;
    int a[10]={1,3,6,8,9,10,12,14,15,2},b[10]={0,4,14,15,14,7,8,9,10,11};
    Initlist(&L1),Initlist(&L2),Initlist(&L3);
    Assignment(&L1,10,a),Assignment(&L2,10,b);

    Union(&L1,&L2,&L3);
    SortAndDelete(&L3);
    Display(&L3);


    Initlist(&L3);
    Intersection(&L1,&L2,&L3);
    SortAndDelete(&L3);
    Display(&L3);

    return 0;
}
